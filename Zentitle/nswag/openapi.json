{
  "x-generator": "NSwag v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Zentitle2 Management API",
    "description": "## Overview \nThis is the documentation for Zentitle2 Software Licensing Platform for SaaS and On-Premise applications.\n\nPlease provide feedback to your account manager on things you like and things you'd like to see.\n\n## Authentication\nZentitle2 Management API uses OAuth2 over https to manage authentication and authorization. \n\nOAuth2 is an open standard for authorization that enables applications to securely access resources from other apps or services. We use `client_credentials` in the API. \n\nIn the client credentials flow, the app sends a request to the authorization server's token endpoint with its client ID and secret, which are used to authenticate the app. If the request is successful, the authorization server returns an access token, which the app can use to access protected resources on the resource server.\n\nThe client credentials flow is typically used by server-side apps or apps that run in a trusted environment, such as a secure server or device. It allows these apps to access protected resources on behalf of themselves, rather than on behalf of a user. This grant type is not suitable for browser-based apps or mobile apps, as it does not involve user interaction and does not provide a way for users to grant access to their protected resources.\n\nHere is an example of how to generate client credentials for OAuth2:\n\n1. Register your application in the Zentitle2 administration site\n\n2. During the registration process, the authorization server will provide you with a client ID and a client secret. These are unique, secret values that identify your app and are used to authenticate your requests to the authorization server.\n\n3. In order to use the client credentials grant type, your app must be able to securely store the client ID and secret. These values should never be shared or exposed to anyone outside of your app, as they provide access to the authorization server on your app's behalf.\n\n4. Once you have securely stored the client ID and secret, you can begin making requests to the authorization server's token endpoint using the client credentials grant type. This typically involves sending a POST request to the token endpoint, with the client ID and secret provided in the request body.\n\n5. If the request is successful, the authorization server will return an access token, which can be used to access protected resources on the resource server. The access token may also include a refresh token, which can be used to obtain a new access token when the original one expires.\n\nHere is an example code in JavaScript that gets the access token:\n```javascript\nvar body = 'grant_type=client_credentials'\n            + '&client_id=' + clientId\n            + '&client_secret=' + clientSecret;\npm.sendRequest({\n    url: oauth_url,\n    method: 'POST',\n    header: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: body\n    }\n}, function (err, res) {\n    var response = res.json();\n    environment.set(\"access_token\", response.access_token);\n    environment.set(\"token_time\", Date.now() + response.expires_in * 1000);\n});\n```\nAccess token should be sent with every API request in the `Authorization` header as: \n```\nAuthorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI...\n```\n\nWhenever the Authorization section for an endpoint contains more than one role in the list, it means that any of those roles is sufficient to access this endpoint.\n\nAPI requires one more header to be set with Id of your Zentitle2 tenant, for example: \n```\nN-TenantId: t_KRwhRp1yl0_9gsZjE5Yjaw\n```\n## Postman Configuration\nIt's very easy to setup Postman to use with Zentitle2 Management API. \n\n1) Download OpenAPI specification (top of this page) \n2) Import downloaded file to Postman\n3) Select \"No Auth\" in the Auth tab (auth will be done using pre-request script). \n4) Add following script in the pre-request script tab: \n\n```javascript\npm.environment.set(\"baseUrl\", pm.environment.get(\"zentitleApiUrl\"));\n\nvar setAuthHeaders = () => {\n    pm.request.headers.add({key: 'N-TenantId', value: pm.environment.get(\"tenantId\") });\n    pm.request.headers.add({key: 'Authorization', value: pm.environment.get(\"oauth_token\") });\n};\n\nif (pm.environment.get(\"token_time\") && pm.environment.get(\"token_time\") > Date.now()) {\n    setAuthHeaders();\n    return;\n}\n\nvar body = 'grant_type=client_credentials'\n    + '&client_id=' + pm.environment.get(\"clientId\")\n    + '&client_secret=' + pm.environment.get(\"clientSecret\");\npm.sendRequest({\n    url: pm.environment.get(\"oauth_url\"),\n    method: 'POST',\n    header: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: body\n    }\n}, function (err, res) {\n    var response = res.json();\n    pm.environment.set(\"oauth_token\", 'Bearer ' + response.access_token);\n    pm.environment.set(\"token_time\", Date.now() + response.expires_in * 1000);\n\n    setAuthHeaders();\n});\n```\n\n5) Create new Postman Environment with following variables: \n\n```\noauth_url: ---your keycloak URL---  \nclientId: ---your client id---\nclientSecret: ---your client secret---\ntenantId: ---your tenant id---\nzentitleApiUrl: ---api url---\n```\n\n## Responses\n| Status | Meaning    | Description                                                          |\n|--------|------------|----------------------------------------------------------------------|\n| 200    | OK         | Returned after successful GET requests, body contains requested data |\n| 201    | Created    | Returned after successful POST request, body contains created object |\n| 204    | No Content | Returned after successful PUT and  DELETE requests. Body is empty    |\n\nIn case of an error, API returns error status code along with `ApiError` object if applicable.  \n\n## Errors \n\n| Status             | Meaning              | Description                                    |\n|--------------------|----------------------|------------------------------------------------|\n| 400                | Bad Request          | can not parse request body or parameters       |\n| 401                | Unauthorized         | missing or invalid access token                |\n| 402                | Request Failed       | parameters were valid but the request failed   |\n| 403                | Forbidden            | insufficient permissions to perform request    |\n| 404                | Not Found            | requested resource has not been found          |\n| 409                | Conflict             | request conflicts with the current state       |\n| 422                | Unprocessable entity | request parses correctly, but fails validation |\n| 429                | Too many requests    | too many requests hit the API too quickly      |\n| 500, 502, 503, 504 | Server errors        | something went wrong on Zentitle's end         |\n",
    "version": "v1.0.144",
    "x-logo": {
      "url": "/assets/logo.svg",
      "href": "https://docs.zentitle.io/"
    }
  },
  "paths": {
    "api/v1/entitlements/activations": {
      "post": {
        "tags": [
          "Activations"
        ],
        "summary": "Create activation",
        "description": "Activate entitlement for provided seat id and create activation that can be used feature management\nThis method will work only when entitlement was created before create activation is called.",
        "operationId": "Activations_Activate",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create activation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateEntitlementApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The activation object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Activations"
        ],
        "summary": "Refresh activation",
        "description": "Refresh lease time of provided seat activation",
        "operationId": "Activations_Refresh",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to refresh activation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshActivationApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The activation object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/activations/{activationId}": {
      "delete": {
        "tags": [
          "Activations"
        ],
        "summary": "Delete activation",
        "description": "Delete activation on connected entitlement. After this operation another\nactivate operation can be process with same or different seat id\nThis method will also return all reusable features checked out on this activation.\nThere are some cases when activation cannot be deleted due to system constraints\n(one of these constraints is that activation may be in the linger period). If that's the case,\n'force' query string parameter can be used to force the activation to delete.",
        "operationId": "Activations_Delete",
        "parameters": [
          {
            "name": "activationId",
            "in": "path",
            "required": true,
            "description": "Activation identifier",
            "schema": {
              "type": "string",
              "format": "ActivationId",
              "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
            },
            "x-position": 1
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force activation deletion disregarding system constraints",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Activations"
        ],
        "summary": "Get activation state",
        "description": "This method returns activation details including information about attributes and available features",
        "operationId": "Activations_GetActivationState",
        "parameters": [
          {
            "name": "activationId",
            "in": "path",
            "required": true,
            "description": "Activation identifier",
            "schema": {
              "type": "string",
              "format": "ActivationId",
              "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The activation state object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStateModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/activations/{activationId}/checkout": {
      "patch": {
        "tags": [
          "Activations"
        ],
        "summary": "Checkout activation feature",
        "description": "This method checkouts some amount feature. Feature can be used permanently (consumption token)\nor can be returned (element pool, floating) using return feature method.",
        "operationId": "Activations_CheckoutFeature",
        "parameters": [
          {
            "name": "activationId",
            "in": "path",
            "required": true,
            "description": "Activation identifier",
            "schema": {
              "type": "string",
              "format": "ActivationId",
              "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to checkout feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutEntitlementFeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/activations/{activationId}/return": {
      "patch": {
        "tags": [
          "Activations"
        ],
        "summary": "Return activation feature",
        "description": "This method returns amount of feature. Only features of following types (element pool, floating)\nare allowed to be returned",
        "operationId": "Activations_ReturnFeature",
        "parameters": [
          {
            "name": "activationId",
            "in": "path",
            "required": true,
            "description": "Activation identifier",
            "schema": {
              "type": "string",
              "format": "ActivationId",
              "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to return feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnEntitlementFeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/account/api-clients": {
      "post": {
        "tags": [
          "ApiClients"
        ],
        "summary": "Create API client",
        "description": "Creates new API client that can be used for API communication. Client secret is optional.\nIf client secret is not provided, it will be generated automatically and returned in response.",
        "operationId": "ApiClients_CreateClient",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a API client",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiClientRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClientModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "api:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "ApiClients"
        ],
        "summary": "Get API client lists",
        "description": "Returns list of API clients for current tenant.",
        "operationId": "ApiClients_GetClientList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfApiClientListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "api:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/api-clients/{apiId}": {
      "delete": {
        "tags": [
          "ApiClients"
        ],
        "summary": "Delete API client",
        "description": "Deletes API client for current tenant.",
        "operationId": "ApiClients_DeleteClient",
        "parameters": [
          {
            "name": "apiId",
            "in": "path",
            "required": true,
            "description": "Api client identifier",
            "schema": {
              "type": "string",
              "format": "ApiClientId",
              "example": "api_Gu_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": [
              "api:admin"
            ]
          }
        ]
      }
    },
    "api/v1/attributes": {
      "post": {
        "tags": [
          "Global attributes"
        ],
        "summary": "Create global attribute",
        "description": "Create a global attribute that will be included in all entitlements.\n            Default value can be overridden in product or edition level.",
        "operationId": "Attributes_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create an attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttributeApiRequest"
              },
              "example": {
                "type": "string",
                "key": "version",
                "value": "1.0.0",
                "validationRules": [
                  {
                    "regex": "^[0-9.]+$",
                    "errorMessage": "Version can only contain numbers and dots",
                    "ruleType": "regex"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The attribute object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                },
                "example": {
                  "id": "atr_-z-NcnmSRU_OWsOV5moC5A",
                  "type": "string",
                  "key": "version",
                  "value": "1.0.0",
                  "level": "global",
                  "valueLevel": "global",
                  "validationRules": [
                    {
                      "regex": "^[0-9.]+$",
                      "errorMessage": "Version can only contain numbers and dots",
                      "ruleType": "regex"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Global attributes"
        ],
        "summary": "Get global attributes list",
        "description": "This method returns list of all attributes",
        "operationId": "Attributes_GetList",
        "responses": {
          "200": {
            "description": "List of attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/attributes/{attributeId}": {
      "put": {
        "tags": [
          "Global attributes"
        ],
        "summary": "Update global attribute definition",
        "description": "This method allows to change settings of selected global attribute",
        "operationId": "Attributes_Update",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributeApiRequest"
              },
              "example": {
                "key": "version",
                "value": "1.0.0",
                "validationRules": [
                  {
                    "regex": "^[0-9.]+$",
                    "errorMessage": "Version can only contain numbers and dots",
                    "ruleType": "regex"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Global attributes"
        ],
        "summary": "Get global attribute",
        "description": "This method returns selected global attribute",
        "operationId": "Attributes_Get",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The attribute object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                },
                "example": {
                  "id": "atr_I6uBllrCfUqNzxTMMkyWIw",
                  "type": "string",
                  "key": "version",
                  "value": "1.0.0",
                  "level": "global",
                  "valueLevel": "global",
                  "validationRules": [
                    {
                      "regex": "^[0-9.]+$",
                      "errorMessage": "Version can only contain numbers and dots",
                      "ruleType": "regex"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers/{customerId}/admin": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create customer admin",
        "description": "Creates new customer admin",
        "operationId": "CustomerAdmins_CreateAdmin",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a customer admin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerAdminApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "The customer admin object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update customer admin",
        "description": "This method allows to change properties of selected customer admin",
        "operationId": "CustomerAdmins_UpdateAdmin",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update a customer admin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerAdminApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer admin",
        "description": "This method returns selected customer admin",
        "operationId": "CustomerAdmins_GetAdmin",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The customer admin object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAdminModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:read",
              " customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers/{customerId}/eup": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer End User Portal URL",
        "description": "This method returns customer End User Portal URL",
        "operationId": "CustomerEup_GetEupUrl",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The customer eup object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEupModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:read",
              " customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create customer",
        "description": "Creates new customer",
        "operationId": "Customers_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer list",
        "description": "This method returns list of customers",
        "operationId": "Customers_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfCustomerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:read",
              " customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers/{customerId}": {
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update customer",
        "description": "This method allows to change settings of selected customer",
        "operationId": "Customers_Update",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update a customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer",
        "description": "This method returns selected customer",
        "operationId": "Customers_Get",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "stats"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The customer object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:read",
              " customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers/{customerId}/disable": {
      "patch": {
        "tags": [
          "Customers"
        ],
        "summary": "Disable customer",
        "description": "This method disables customer and it's entitlements.",
        "operationId": "Customers_Disable",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/customers/{customerId}/enable": {
      "patch": {
        "tags": [
          "Customers"
        ],
        "summary": "Enable customer",
        "description": "This method re-enables customer and it's entitlements.",
        "operationId": "Customers_Enable",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "example": "cust_Bx_XkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "customers:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions/{editionId}/attributes/{attributeId}": {
      "patch": {
        "tags": [
          "Edition attributes"
        ],
        "summary": "Update edition attribute",
        "description": "This method allows to change value of selected attribute for specific edition.\nThis method can be used to override default value of global and products attributes.",
        "operationId": "EditionAttributes_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributeValueApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Edition attributes"
        ],
        "summary": "Delete edition attribute",
        "description": "This method removes attribute value defined in edition level, falling back to value defined on higher level.",
        "operationId": "EditionAttributes_Delete",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Edition attributes"
        ],
        "summary": "Get edition attribute",
        "description": "This method returns selected attribute with value defined in edition level (in case of override).\nIf no value is defined in edition level, value defined in higher level is returned.",
        "operationId": "EditionAttributes_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The attribute object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                },
                "example": {
                  "id": "atr_YOAuaplYTU2QYcaRO9XUlA",
                  "type": "string",
                  "key": "version",
                  "value": "1.0.0",
                  "level": "global",
                  "valueLevel": "global",
                  "validationRules": [
                    {
                      "regex": "^[0-9.]+$",
                      "errorMessage": "Version can only contain numbers and dots",
                      "ruleType": "regex"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions/{editionId}/attributes": {
      "get": {
        "tags": [
          "Edition attributes"
        ],
        "summary": "Get edition attributes list",
        "description": "This method returns list of all attributes for selected edition.",
        "operationId": "EditionAttributes_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions/{editionId}/features/{featureId}": {
      "put": {
        "tags": [
          "Edition features"
        ],
        "summary": "Update edition feature",
        "description": "This method allows to change value of selected feature for specific edition.\nThis method can be used to override default value of global and products features.",
        "operationId": "EditionFeatures_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEditionFeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Edition features"
        ],
        "summary": "Delete edition feature",
        "description": "This method removes feature value defined in edition level, falling back to value defined on higher level.",
        "operationId": "EditionFeatures_Delete",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Edition features"
        ],
        "summary": "Get edition feature",
        "description": "This method returns selected feature with value defined in edition level (in case of override).\nIf no value is defined in edition level, value defined in higher level is returned.",
        "operationId": "EditionFeatures_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The feature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions/{editionId}/features": {
      "get": {
        "tags": [
          "Edition features"
        ],
        "summary": "Get edition feature list",
        "description": "This method returns list of all features for selected edition.",
        "operationId": "EditionFeatures_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of features",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions": {
      "post": {
        "tags": [
          "Editions"
        ],
        "summary": "Create edition",
        "description": "Creates new product edition",
        "operationId": "Editions_Create",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create an edition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditionApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "The edition object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditionModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Editions"
        ],
        "summary": "Get edition list",
        "description": "This method returns list of editions that can be filtered by following query parameters",
        "operationId": "Editions_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "List of editions objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfEditionModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/editions/{editionId}": {
      "put": {
        "tags": [
          "Editions"
        ],
        "summary": "Update product edition",
        "description": "This method allows to change settings of selected edition",
        "operationId": "Editions_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update edition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditionApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Editions"
        ],
        "summary": "Get edition",
        "description": "This method returns product edition details",
        "operationId": "Editions_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "editionId",
            "in": "path",
            "required": true,
            "description": "Edition identifier",
            "schema": {
              "type": "string",
              "format": "EditionId",
              "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The edition object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditionModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get entitlement group list",
        "description": "This method returns entitlement group list.\nAmount of data returned can be adjusted by using query expand parameter configuration",
        "operationId": "EntitlementGroup_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "nullable": true,
              "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "customer"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlement groups objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfEntitlementGroupModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/groups/{entitlementGroupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get entitlement group",
        "description": "This method returns entitlement group details.\nAmount of data returned can be adjusted by using query expand parameter configuration",
        "operationId": "EntitlementGroup_Get",
        "parameters": [
          {
            "name": "entitlementGroupId",
            "in": "path",
            "required": true,
            "description": "Entitlement group identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementGroupId",
              "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "customer,entitlements,attributes,features"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The entitlement group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementGroupModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/groups/{entitlementGroupId}/activation-codes/add": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Add activation codes",
        "description": "This method will add activation codes to the entitlement group.",
        "operationId": "EntitlementGroup_AddActivationCodes",
        "parameters": [
          {
            "name": "entitlementGroupId",
            "in": "path",
            "required": true,
            "description": "Entitlement group identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementGroupId",
              "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create activation code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddActivationCodesApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/groups/{entitlementGroupId}/activation-codes/generate": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Generate activation codes",
        "description": "This method will generate new codes and add them to the entitlement group.",
        "operationId": "EntitlementGroup_GenerateActivationCodes",
        "parameters": [
          {
            "name": "entitlementGroupId",
            "in": "path",
            "required": true,
            "description": "Entitlement group identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementGroupId",
              "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to generate activation codes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateActivationCodesApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationCodesModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/groups/{entitlementGroupId}/activation-codes/remove": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove activation codes",
        "description": "This method will remove activation codes from the entitlement group.",
        "operationId": "EntitlementGroup_RemoveActivationCodes",
        "parameters": [
          {
            "name": "entitlementGroupId",
            "in": "path",
            "required": true,
            "description": "Entitlement group identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementGroupId",
              "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to remove activation code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveActivationCodesApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements": {
      "post": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Create entitlement group",
        "description": "Create entitlement using product sku. All other parameters are optional.\nCustomerId can be used to tracing other entitlement of the same customer.\nActivation code is also optional and if not provided it will be generated automatically.\nIf 3rd party activation codes source is used it should be provided on this call.\nThis call will create entitlement group what will contain one or more entitlements\nthat's is defined by offering specification.",
        "operationId": "Entitlements_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create entitlement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntitlementApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The entitlement group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementGroupModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:create"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Get entitlement list",
        "description": "This method returns list of entitlements that can be filtered by following query parameters",
        "operationId": "Entitlements_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer identifier",
            "schema": {
              "type": "string",
              "format": "CustomerId",
              "nullable": true,
              "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
            },
            "x-position": 3
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "nullable": true,
              "example": "prod_oH_hPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 4
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "customer"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlement objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfEntitlementListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}": {
      "get": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Get entitlement",
        "description": "This method returns entitlement details",
        "operationId": "Entitlements_Get",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "product,attributes,features,offering"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The entitlement object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Update entitlement",
        "description": "Allows to change settings of selected entitlement, including attributes and features.\nOnly provided features and attributes will be processed. If the caller has no intentions to\nupdate features or attributes those field can be sent as null and all values will remain intact",
        "operationId": "Entitlements_Update",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "forceSeatCount",
            "in": "query",
            "description": "Force seat count change",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update entitlement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntitlementApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/activate": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Activate entitlement",
        "description": "This method change state of entitlement that seats can be activated.\nDepending of offering configuration entitlement can be activated during entitlement creation",
        "operationId": "Entitlements_Activate",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/change-offering": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Change entitlement offering",
        "description": "This method allows to change entitlement offering. If can only change to same product offering.\nIf new offering has lower seat count than seats currently used in entitlement\nit will fail unless forceSeatCount query string parameter is set to true.\nIf seat count or overdraft settings were edited manually before they will not be changed by this method.\nThis method will also update all entitlement features and attributes to match new offering\nunless they were previously changed. All consumption token features usage will be reset. If entitlement\nwas not activated yet and offering has been configured to activate entitlement on creation it will be\napplied by this method. For subscription offerings it will also update entitlement expiry date to match\nnew offering starting from current date.",
        "operationId": "Entitlements_ChangeEntitlementOffering",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "forceSeatCount",
            "in": "query",
            "description": "Force seat count change",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to change entitlement offering",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEntitlementOfferingApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/reset-overrides": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Reset entitlement overrides",
        "description": "This method allows to reset entitlement overrides to match current product configuration.\nEach field can be reset individually by setting corresponding field to true.\nThis method can also to restore current configuration for features and attributes by sending\nappropriate keys literals in features and attributes arrays.\nIf any of requested fields was not overridden but current product configuration is different\nfrom default it still will be updated with current value from product configuration.\nIf reset seatCount or overdraftSeatLimit fields where used and current product configuration\nresults in lower seat count than seats currently used in entitlement it will fail unless forceSeatCount\nquery string parameter is set to true.",
        "operationId": "Entitlements_ResetOverrides",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "forceSeatCount",
            "in": "query",
            "description": "Force seat count change",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to reset entitlement overrides",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetEntitlementOverridesApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/renew": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Renew entitlement",
        "description": "Renews a subscription entitlement. This method is specially designed for renewal\nof previously activated subscription entitlements. The new expiry date is determined\nusing following rules:\n* If the expiration date has passed but the grace period is active, the new expiry date\nwill be calculated by adding the subscription period to the current expiry date.\n* If the grace period has either expired or not defined at all, the expiry date will\nbe computed by adding the subscription period to the current date.\n* If the expiry date is still in the future, the new expiry date will be determined\nby adding the subscription period to the current expiry date.\n            \nThis method also resets all consumption token feature usage at the beginning of the\nnew subscription period.",
        "operationId": "Entitlements_Renew",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/activations": {
      "get": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "List of entitlement activations",
        "description": "This method returns list of entitlement activation that can be filtered by following query parameters",
        "operationId": "Entitlements_GetActivationsSeatList",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 3
          },
          {
            "name": "seatId",
            "in": "query",
            "description": "Seat id",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "user@boeing.com"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of activation objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfActivationModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/activations-log": {
      "get": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Log of activations activity",
        "description": "This method returns log of activations activity on the entitlement",
        "operationId": "Entitlements_GetActivationsLog",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 3
          },
          {
            "name": "seatId",
            "in": "query",
            "description": "Seat id",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "john.doe@elevate.com"
            },
            "x-position": 4
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "List of activation objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfActivationLogModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:read",
              " entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/feature/{featureId}/reset": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Reset usage count of a feature",
        "description": "Only consumption token features usage can be reset",
        "operationId": "Entitlements_ResetFeatureUsage",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/export": {
      "post": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Export entitlement and delegate it to the Local License Server",
        "description": "This method exports the entitlement, freezes it, and generates a token containing all the necessary data for import into the Local License Server",
        "operationId": "Entitlements_Export",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "exportRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportEntitlementApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The offline activation response token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportEntitlementApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/export/token": {
      "post": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Generate entitlement export token",
        "description": "This method generates a token containing the up-to-date entitlement data for import into the Local License Server",
        "operationId": "Entitlements_GenerateExportToken",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The offline activation response token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportEntitlementApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/import": {
      "post": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Import entitlement back from the Local License Server",
        "description": "This method ends the current LLS export session and changes the entitlement host back to cloud",
        "operationId": "Entitlements_Import",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "importRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportEntitlementApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/provision": {
      "post": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Trigger provision event",
        "description": "This method triggers provision webhook event for the entitlement",
        "operationId": "Entitlements_Provision",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Reset provision status",
        "description": "This method resets provision date for the entitlement",
        "operationId": "Entitlements_ProvisionDelete",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/disable": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Disable entitlement",
        "description": "This method disables entitlement. Disabled entitlement cannot be activated.",
        "operationId": "Entitlements_Disable",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/{entitlementId}/enable": {
      "patch": {
        "tags": [
          "General entitlement operations"
        ],
        "summary": "Enable entitlement",
        "description": "This method re-enables entitlement. Enabled entitlement can be used normally.",
        "operationId": "Entitlements_Enable",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "description": "Entitlement identifier",
            "schema": {
              "type": "string",
              "format": "EntitlementId",
              "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/eup/settings": {
      "get": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Get EUP settings",
        "description": "This endpoint returns current End User Portal settings object.\nIf not configured yet, default values are returned.",
        "operationId": "EupSettings_GetSettings",
        "responses": {
          "200": {
            "description": "The EUP settings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EupSettingsModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Update EUP settings",
        "description": "This endpoint updates current End User Portal settings object.",
        "operationId": "EupSettings_UpdateSettings",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update EUP settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEupSettingsApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/eup/logo": {
      "post": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Add logo file",
        "description": "This endpoint adds logo file for the End User Portal.\nLogo file link is returned in the Location header and can be retrieved using GetLogo.",
        "operationId": "EupSettings_AddLogo",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FormFile": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Delete logo file",
        "description": "This endpoint deletes logo file for the End User Portal.",
        "operationId": "EupSettings_DeleteLogo",
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/eup/logo/{logoId}": {
      "get": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Get logo file",
        "description": "This endpoint returns logo file for the End User Portal.",
        "operationId": "EupSettings_GetLogo",
        "parameters": [
          {
            "name": "logoId",
            "in": "path",
            "required": true,
            "description": "Logo file identifier",
            "schema": {
              "type": "string",
              "format": "FileId",
              "example": "file_LL1KqdXz6kKkfU1HcWR9OA"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Logo file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/eup/css": {
      "post": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Add css file",
        "description": "This endpoint adds css file for the End User Portal customization.\nCss file link is returned in the Location header and can be retrieved using GetCss.",
        "operationId": "EupSettings_AddCss",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FormFile": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Delete css file",
        "description": "This endpoint deletes css file for the End User Portal customization.",
        "operationId": "EupSettings_DeleteCss",
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/eup/css/{cssId}": {
      "get": {
        "tags": [
          "End User Portal"
        ],
        "summary": "Get css file",
        "description": "This endpoint returns css file for the End User Portal customization.",
        "operationId": "EupSettings_GetCss",
        "parameters": [
          {
            "name": "cssId",
            "in": "path",
            "required": true,
            "description": "Css file identifier",
            "schema": {
              "type": "string",
              "format": "FileId",
              "example": "file_Kx1KqdXz6kKkfU1HcWR9OA"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Css file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "eup:admin"
            ]
          }
        ]
      }
    },
    "api/v1/features": {
      "post": {
        "tags": [
          "Global features"
        ],
        "summary": "Create global feature",
        "description": "Create a global feature that will be included in all entitlements.\n            Default value can be overridden in product or edition level.",
        "operationId": "Features_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create an feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The feature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Global features"
        ],
        "summary": "Get global attributes list",
        "description": "This method returns list of all attributes",
        "operationId": "Features_GetList",
        "responses": {
          "200": {
            "description": "List of attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/features/{featureId}": {
      "put": {
        "tags": [
          "Global features"
        ],
        "summary": "Update global feature",
        "description": "This method allows to change settings of selected global feature",
        "operationId": "Features_Update",
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Global features"
        ],
        "summary": "Get global feature",
        "description": "This method returns selected global feature",
        "operationId": "Features_Get",
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The feature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/key": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "Get public part of the asymmetric key",
        "operationId": "Keys_Get",
        "responses": {
          "200": {
            "description": "Public key in JWK format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWK"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "api:admin"
            ]
          }
        ]
      }
    },
    "api/v1/local-license-servers": {
      "get": {
        "tags": [
          "Local license servers"
        ],
        "summary": "Get local license servers list",
        "description": "Returns list of all available local license servers",
        "operationId": "LocalLicenseServers_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfLocalLicenseServerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "lls:admin"
            ]
          }
        ]
      }
    },
    "api/v1/local-license-servers/{localLicenseServerId}": {
      "get": {
        "tags": [
          "Local license servers"
        ],
        "summary": "Get Local License Server",
        "description": "This method returns Local License Server details",
        "operationId": "LocalLicenseServers_Get",
        "parameters": [
          {
            "name": "localLicenseServerId",
            "in": "path",
            "required": true,
            "description": "Local License Server identifier",
            "schema": {
              "type": "string",
              "format": "LocalLicenseServerId",
              "example": "lls_oH_hPJ3BgEO172Yd9-KuTg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The Local License Server object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalLicenseServerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "lls:admin"
            ]
          }
        ]
      }
    },
    "api/v1/local-license-servers/config": {
      "get": {
        "tags": [
          "Local license servers"
        ],
        "summary": "Get Local License Server's configuration",
        "operationId": "LocalLicenseServers_GetConfig",
        "responses": {
          "200": {
            "description": "Local License Server's deployment configuration parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalLicenseServerConfigModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "lls:admin"
            ]
          }
        ]
      }
    },
    "api/v1/offerings": {
      "post": {
        "tags": [
          "Offerings"
        ],
        "summary": "Create offering",
        "description": "Creates new offering",
        "operationId": "Offerings_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a offering",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The product object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Get offering list",
        "description": "This method returns list of offering that can be filtered by following query parameters",
        "operationId": "Offerings_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Optional product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "nullable": true,
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          },
          {
            "name": "planId",
            "in": "query",
            "description": "Optional plan identifier",
            "schema": {
              "type": "string",
              "format": "PlanId",
              "nullable": true,
              "example": "plan_Cu_WkJrFzE2HStEdPdRing"
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "edition,plan"
            },
            "x-position": 3
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 4
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of offering objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfOfferingModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/offerings/{offeringId}": {
      "put": {
        "tags": [
          "Offerings"
        ],
        "summary": "Update offering",
        "description": "This method allows to change settings of selected offering",
        "operationId": "Offerings_Update",
        "parameters": [
          {
            "name": "offeringId",
            "in": "path",
            "required": true,
            "description": "Offering identifier",
            "schema": {
              "type": "string",
              "format": "OfferingId",
              "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Get offering",
        "description": "This method returns offering details",
        "operationId": "Offerings_Get",
        "parameters": [
          {
            "name": "offeringId",
            "in": "path",
            "required": true,
            "description": "Offering identifier",
            "schema": {
              "type": "string",
              "format": "OfferingId",
              "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Expand configuration",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "edition,plan,product,entitlementsCount"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The offering object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/entitlements/activations/offline": {
      "post": {
        "tags": [
          "Activations"
        ],
        "summary": "Create offline activation",
        "description": "Activate entitlement for provided seat id and create activation for offline usage\nThis method will work only when entitlement was created before create activation is called.",
        "operationId": "OfflineActivations_Activate",
        "requestBody": {
          "x-name": "activationRequest",
          "description": "Encrypted offline activation token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfflineActivationApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Offline activation response token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfflineActivationApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Activations"
        ],
        "summary": "Deactivate offline activation",
        "description": "Deactivate offline activation on connected entitlement. After this operation, another\nactivate operation can be process with same or different seat id",
        "operationId": "OfflineActivations_Deactivate",
        "requestBody": {
          "x-name": "deactivationRequest",
          "description": "Encrypted offline deactivation token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfflineDeactivationApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Activations"
        ],
        "summary": "Refresh offline activation",
        "description": "Refresh offline lease time of the provided seat activation",
        "operationId": "OfflineActivations_Refresh",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to refresh activation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshActivationApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The activation object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfflineRefreshApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "entitlements:activate"
            ]
          }
        ]
      }
    },
    "api/v1/plans": {
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create plan",
        "description": "Creates new plan",
        "operationId": "Plans_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a plan",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The plan object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Get plan list",
        "description": "This method returns list of plans that can be filtered by following query parameters",
        "operationId": "Plans_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of plans objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfPlanModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/plans/{planId}": {
      "put": {
        "tags": [
          "Plans"
        ],
        "summary": "Update plan",
        "description": "This method allows to change settings of selected plan",
        "operationId": "Plans_Update",
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "required": true,
            "description": "Plan identifier",
            "schema": {
              "type": "string",
              "format": "PlanId",
              "example": "plan_Cu_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update plan",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Get plan",
        "description": "This method returns plan details",
        "operationId": "Plans_Get",
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "required": true,
            "description": "Plan identifier",
            "schema": {
              "type": "string",
              "format": "PlanId",
              "example": "plan_Cu_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The plan object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/attributes": {
      "post": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Create product attribute",
        "description": "Create new product attribute.\n            Value defined for this attribute can be overridden in each edition if required.",
        "operationId": "ProductAttributes_Create",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create an attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttributeApiRequest"
              },
              "example": {
                "type": "string",
                "key": "version",
                "value": "1.0.0",
                "validationRules": [
                  {
                    "regex": "^[0-9.]+$",
                    "errorMessage": "Version can only contain numbers and dots",
                    "ruleType": "regex"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "The attribute object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                },
                "example": {
                  "id": "atr_QANqTOq4wEKrhK4FNypXAg",
                  "type": "string",
                  "key": "version",
                  "value": "1.0.0",
                  "level": "global",
                  "valueLevel": "global",
                  "validationRules": [
                    {
                      "regex": "^[0-9.]+$",
                      "errorMessage": "Version can only contain numbers and dots",
                      "ruleType": "regex"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Get product attributes list",
        "description": "This method returns list of all attributes for selected product.",
        "operationId": "ProductAttributes_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/attributes/{attributeId}": {
      "put": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Update product attribute",
        "description": "This method allows to change settings of selected product attribute.\nThis method can be used to override default value of global attributes for each product separately.",
        "operationId": "ProductAttributes_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an attribute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributeApiRequest"
              },
              "example": {
                "key": "version",
                "value": "1.0.0",
                "validationRules": [
                  {
                    "regex": "^[0-9.]+$",
                    "errorMessage": "Version can only contain numbers and dots",
                    "ruleType": "regex"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Update product attribute value",
        "description": "This method can be used to change value of selected product attribute.\nThis method can be used to override default value of global attributes for each product separately.",
        "operationId": "ProductAttributes_UpdateValue",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an attribute value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributeValueApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Product attributes"
        ],
        "summary": "Get product attribute",
        "description": "This method returns selected attribute.\nIn case of global attribute, if overridden value exists on product level, it will be returned,\notherwise global value will be returned.",
        "operationId": "ProductAttributes_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "description": "Attribute identifier",
            "schema": {
              "type": "string",
              "format": "AttributeDefinitionId",
              "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The attribute object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                },
                "example": {
                  "id": "atr_T3UfPlIVsE6FSHgmwzwA7Q",
                  "type": "string",
                  "key": "version",
                  "value": "1.0.0",
                  "level": "global",
                  "valueLevel": "global",
                  "validationRules": [
                    {
                      "regex": "^[0-9.]+$",
                      "errorMessage": "Version can only contain numbers and dots",
                      "ruleType": "regex"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/features": {
      "post": {
        "tags": [
          "Product features"
        ],
        "summary": "Create product feature",
        "description": "Create new product feature.\n            Value defined for this feature can be overridden in each edition if required.",
        "operationId": "ProductFeatures_Create",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create an feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "The feature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Product features"
        ],
        "summary": "Get product features list",
        "description": "This method returns list of all features for selected product.",
        "operationId": "ProductFeatures_GetList",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of features",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}/features/{featureId}": {
      "put": {
        "tags": [
          "Product features"
        ],
        "summary": "Update product feature",
        "description": "This method allows to change settings of selected feature.\nThis method can be used to override default value of global feature for each product separately.",
        "operationId": "ProductFeatures_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update an feature",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductFeatureApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Product features"
        ],
        "summary": "Get product feature",
        "description": "This method returns selected feature.\nIn case of global feature, if overridden value exists on product level, it will be returned,\notherwise global value will be returned.",
        "operationId": "ProductFeatures_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
            },
            "x-position": 1
          },
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "description": "Feature identifier",
            "schema": {
              "type": "string",
              "format": "FeatureDefinitionId",
              "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The feature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products": {
      "post": {
        "tags": [
          "General product operations"
        ],
        "summary": "Create product",
        "description": "Creates new product with default settings",
        "operationId": "Products_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The product object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "General product operations"
        ],
        "summary": "Get product list",
        "description": "This method returns list of products that can be filtered by following query parameters",
        "operationId": "Products_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of product objects matching selected criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfProductModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/products/{productId}": {
      "put": {
        "tags": [
          "General product operations"
        ],
        "summary": "Update product",
        "description": "This method allows to change settings of selected product",
        "operationId": "Products_Update",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "products:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "General product operations"
        ],
        "summary": "Get product",
        "description": "This method returns product details",
        "operationId": "Products_Get",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product identifier",
            "schema": {
              "type": "string",
              "format": "ProductId",
              "example": "prod_Au_WkJrFzE2HStEdPdRing"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The product object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "products:read",
              " products:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role list",
        "description": "Returns list of all roles",
        "operationId": "Roles_GetList",
        "responses": {
          "200": {
            "description": "List of roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfRoleListModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "users:read",
              " users:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role",
        "description": "Get tenant role by roleId",
        "operationId": "Roles_Get",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role identifier",
            "schema": {
              "type": "string",
              "format": "RoleId",
              "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Role details including embedded permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "users:read",
              " users:admin"
            ]
          }
        ]
      }
    },
    "api/v1/tenants/api-clients": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create API client",
        "description": "Creates new API client that can be used for API communication. Client secret is optional.\nIf client secret is not provided, it will be generated automatically.",
        "operationId": "TenantClients_CreateClient",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create a API client",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantClientModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "tenants:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "This method creates user of a system. Password is optional.\nIf password is provided it will be required to change on first login,\notherwise activation email will be sent.",
        "operationId": "Users_Create",
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to create user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Newly created user object or logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "users:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user list",
        "description": "Returns paginated list of tenant users",
        "operationId": "Users_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfUserModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "users:read",
              " users:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user",
        "description": "Get tenant user by userId",
        "operationId": "Users_Get",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User identifier",
            "schema": {
              "type": "string",
              "format": "UserId",
              "example": "user_oH_hPJ3BgEOLTRYd9-kutg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "users:read",
              " users:admin"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Updates tenant user",
        "operationId": "Users_Update",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User identifier",
            "schema": {
              "type": "string",
              "format": "UserId",
              "example": "user_oH_hPJ3BgEOLTRYd9-kutg"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "Properties required to update user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": [
              "users:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/users/{userId}/send-invitation-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Send invitation email",
        "description": "Sends invitation email",
        "operationId": "Users_SendInvitationEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User identifier",
            "schema": {
              "type": "string",
              "format": "UserId",
              "example": "user_oH_hPJ3BgEOLTRYd9-kutg"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Operation completed successfully"
          }
        },
        "security": [
          {
            "Bearer": [
              "users:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/webhooks": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Creates tenant webhook",
        "operationId": "Webhooks_Create",
        "requestBody": {
          "x-name": "model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get list of webhooks",
        "description": "Returns list of account webhooks",
        "operationId": "Webhooks_GetList",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfWebhookModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/webhooks/{webhookListenerId}": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "description": "Updates account  webhook",
        "operationId": "Webhooks_Update",
        "parameters": [
          {
            "name": "webhookListenerId",
            "in": "path",
            "required": true,
            "description": "Webhook Listener identifier",
            "schema": {
              "type": "string",
              "format": "WebhookListenerId",
              "example": "whl_CNrc8PbApEapAfJQN15aIA"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookApiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete webhook",
        "description": "Deletes account webhook",
        "operationId": "Webhooks_Delete",
        "parameters": [
          {
            "name": "webhookListenerId",
            "in": "path",
            "required": true,
            "description": "Webhook Listener identifier",
            "schema": {
              "type": "string",
              "format": "WebhookListenerId",
              "example": "whl_CNrc8PbApEapAfJQN15aIA"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhook",
        "description": "Get account webhook by webhookId",
        "operationId": "Webhooks_Get",
        "parameters": [
          {
            "name": "webhookListenerId",
            "in": "path",
            "required": true,
            "description": "Webhook Listener identifier",
            "schema": {
              "type": "string",
              "format": "WebhookListenerId",
              "example": "whl_CNrc8PbApEapAfJQN15aIA"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/webhooks/{webhookListenerId}/test": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Test webhook listener",
        "description": "Sends a test event to webhook URL",
        "operationId": "Webhooks_Test",
        "parameters": [
          {
            "name": "webhookListenerId",
            "in": "path",
            "required": true,
            "description": "Webhook Listener identifier",
            "schema": {
              "type": "string",
              "format": "WebhookListenerId",
              "example": "whl_CNrc8PbApEapAfJQN15aIA"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      }
    },
    "api/v1/account/webhooks/events": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhook events list",
        "description": "Returns list of all available events",
        "operationId": "Webhooks_GetEventList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfWebhookEventTypeModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "webhooks:admin"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActivationModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Activation identifier",
            "format": "ActivationId",
            "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
          },
          "status": {
            "description": "Activation status",
            "example": "active",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivationStatus"
              }
            ]
          },
          "leaseExpiry": {
            "type": "string",
            "description": "Exclusive seat lease expiry date",
            "format": "date-time"
          },
          "productId": {
            "type": "string",
            "description": "Id of product licensed by entitlement",
            "format": "ProductId",
            "nullable": true,
            "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
          },
          "entitlementId": {
            "type": "string",
            "description": "Id of entitlement",
            "format": "EntitlementId",
            "nullable": true,
            "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
          },
          "seatId": {
            "type": "string",
            "description": "Unique id of seat provided by external system",
            "example": "user@boeing.com"
          },
          "seatName": {
            "type": "string",
            "description": "Optional name of seat provided by external system",
            "nullable": true,
            "example": "User Boeing"
          },
          "activated": {
            "type": "string",
            "description": "Activation creation date",
            "format": "date-time"
          },
          "lastLease": {
            "type": "string",
            "description": "Date when activation was created/last extended",
            "format": "date-time"
          },
          "lingerExpiry": {
            "type": "string",
            "description": "Date until this seat cannot be reused",
            "format": "date-time",
            "nullable": true
          },
          "deactivated": {
            "type": "string",
            "description": "Date activation was deactivated and cannot be longer used",
            "format": "date-time",
            "nullable": true
          },
          "mode": {
            "description": "Activation mode",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivationMode"
              }
            ]
          }
        }
      },
      "ActivationStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "Linger",
          "LeaseExpired"
        ],
        "enum": [
          "active",
          "linger",
          "leaseExpired"
        ]
      },
      "ActivationMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Online",
          "Offline"
        ],
        "enum": [
          "online",
          "offline"
        ]
      },
      "ActivateEntitlementApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "productId",
          "activationCode",
          "seatId"
        ],
        "properties": {
          "productId": {
            "type": "string",
            "description": "Id of a product that will be activated",
            "format": "ProductId",
            "minLength": 1,
            "example": "prod_Au_WkJrFzE2HStEdPdRing"
          },
          "activationCode": {
            "type": "string",
            "description": "Activation code",
            "maxLength": 50,
            "minLength": 1,
            "example": "Y64E-G6QX-56EW-W1BG"
          },
          "seatId": {
            "type": "string",
            "description": "Identifier that will identify computer or account for which activation will be created",
            "maxLength": 50,
            "minLength": 1,
            "example": "user@boeing.com"
          },
          "seatName": {
            "type": "string",
            "description": "Optional name of seat for the activation",
            "maxLength": 50,
            "nullable": true,
            "example": "User Boeing"
          }
        }
      },
      "RefreshActivationApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "activationId"
        ],
        "properties": {
          "activationId": {
            "type": "string",
            "description": "Id of a seat activation that will be refreshed",
            "format": "ActivationId",
            "minLength": 1,
            "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
          }
        }
      },
      "ActivationStateModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivationModel"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "entitlementExpiryDate": {
                "type": "string",
                "description": "Entitlement expiry date (null if not expires)",
                "format": "date-time",
                "nullable": true
              },
              "attributes": {
                "type": "array",
                "description": "Array of activation attributes",
                "items": {
                  "$ref": "#/components/schemas/ActivationAttributeModel"
                }
              },
              "features": {
                "type": "array",
                "description": "Array of activation features",
                "items": {
                  "$ref": "#/components/schemas/ActivationFeatureModel"
                }
              }
            }
          }
        ]
      },
      "ActivationAttributeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute key",
            "example": "Version"
          },
          "type": {
            "description": "Attribute type",
            "example": "string",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeType"
              }
            ]
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true,
            "example": "1.0.0"
          }
        }
      },
      "AttributeType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Number",
          "Date",
          "String"
        ],
        "enum": [
          "number",
          "date",
          "string"
        ]
      },
      "ActivationFeatureModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Feature key",
            "example": "Workers"
          },
          "type": {
            "description": "Feature type",
            "example": "elementPool",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeatureType"
              }
            ]
          },
          "active": {
            "type": "integer",
            "description": "Amount of feature being currently checked out by activation",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "available": {
            "type": "integer",
            "description": "Amount of feature that is still available for checkout (amount form active filed is excluded)",
            "format": "int64",
            "nullable": true,
            "example": 9
          },
          "total": {
            "type": "integer",
            "description": "Total amount of feature in entitlement",
            "format": "int64",
            "nullable": true,
            "example": 10
          }
        }
      },
      "FeatureType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Bool",
          "Consumption",
          "ElementPool",
          "Floating"
        ],
        "enum": [
          "bool",
          "consumption",
          "elementPool",
          "floating"
        ]
      },
      "CheckoutEntitlementFeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "key",
          "amount"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Feature key",
            "maxLength": 50,
            "minLength": 1,
            "example": "Workers"
          },
          "amount": {
            "type": "integer",
            "description": "Amount to checkout",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 1,
            "example": 1
          }
        }
      },
      "ReturnEntitlementFeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "key",
          "amount"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Feature key",
            "maxLength": 50,
            "minLength": 1,
            "example": "Workers"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of feature to return",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 1,
            "example": 1
          }
        }
      },
      "ApiClientModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client Id",
            "example": "elevate-api-client"
          },
          "clientName": {
            "type": "string",
            "description": "Optional name of the client",
            "nullable": true,
            "example": "Full access API client"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret",
            "example": "xMHmhxf6wdt7RtPHAde8AC101loUQfFr"
          },
          "id": {
            "type": "string",
            "description": "Api client identifier",
            "format": "ApiClientId",
            "example": "api_Gu_WkJrFzE2HStEdPdRing"
          }
        }
      },
      "CreateApiClientRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client Id",
            "minLength": 1,
            "pattern": "^[A-Za-z](?:[A-Za-z0-9\\-_]{0,48}[A-Za-z0-9])?$",
            "example": "elevate-api-client"
          },
          "clientName": {
            "type": "string",
            "description": "Optional name of the client",
            "maxLength": 50,
            "nullable": true,
            "example": "Full access API client"
          },
          "clientSecret": {
            "type": "string",
            "description": "Optional client secret",
            "maxLength": 64,
            "minLength": 32,
            "nullable": true
          }
        }
      },
      "ListOfApiClientListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/ApiClientListModel"
            }
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ApiClientListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client Id",
            "example": "elevate-api-client"
          },
          "clientName": {
            "type": "string",
            "description": "Optional name of the client",
            "nullable": true,
            "example": "Full access API client"
          },
          "id": {
            "type": "string",
            "description": "Api client identifier",
            "format": "ApiClientId",
            "example": "api_Gu_WkJrFzE2HStEdPdRing"
          }
        }
      },
      "AttributeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Attribute identifier",
            "format": "AttributeDefinitionId",
            "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
          },
          "type": {
            "description": "Attribute type",
            "example": "string",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeType"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "Attribute key",
            "example": "version"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true,
            "example": "1.0.0"
          },
          "level": {
            "description": "Level on which attribute was defined",
            "example": "global",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeLevel"
              }
            ]
          },
          "valueLevel": {
            "description": "Level on which attribute value was defined",
            "example": "global",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeLevel"
              }
            ]
          },
          "validationRules": {
            "type": "array",
            "description": "Attribute validation rules",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeValidationRule"
            }
          }
        }
      },
      "AttributeLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Global",
          "Product",
          "Edition"
        ],
        "enum": [
          "global",
          "product",
          "edition"
        ]
      },
      "AttributeValidationRule": {
        "type": "object",
        "discriminator": {
          "propertyName": "ruleType",
          "mapping": {
            "regex": "#/components/schemas/RegexValidationRule",
            "email": "#/components/schemas/EmailValidationRule"
          }
        },
        "required": [
          "ruleType"
        ],
        "properties": {
          "ruleType": {
            "example": "email",
            "$ref": "#/components/schemas/AttributeValidationRuleType"
          }
        }
      },
      "AttributeValidationRuleType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Regex",
          "Email"
        ],
        "enum": [
          "regex",
          "email"
        ]
      },
      "RegexValidationRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeValidationRule"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "regex",
              "errorMessage"
            ],
            "properties": {
              "regex": {
                "type": "string",
                "description": "Regex pattern used to validate attribute value",
                "minLength": 1,
                "example": "^[0-9.]+$"
              },
              "errorMessage": {
                "type": "string",
                "description": "Error message returned when attribute value is not valid",
                "maxLength": 50,
                "minLength": 1,
                "example": "Version can contain only numbers and dots"
              }
            }
          }
        ]
      },
      "EmailValidationRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeValidationRule"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreateAttributeApiRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeApiRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "description": "Type of attribute",
                "example": "string",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AttributeType"
                  }
                ]
              }
            }
          }
        ]
      },
      "AttributeApiRequest": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute unique key",
            "maxLength": 50,
            "minLength": 1,
            "example": "version"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "maxLength": 500,
            "nullable": true,
            "example": "1.0.0"
          },
          "validationRules": {
            "type": "array",
            "description": "Optional validation rules for the attribute value",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeValidationRule"
            }
          }
        }
      },
      "UpdateAttributeApiRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeApiRequest"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AttributesListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of attributes",
            "items": {
              "$ref": "#/components/schemas/AttributeModel"
            }
          }
        }
      },
      "CustomerModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer identifier",
            "format": "CustomerId",
            "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
          },
          "name": {
            "type": "string",
            "description": "Customer name",
            "example": "Boeing Corporation"
          },
          "accountRefId": {
            "type": "string",
            "description": "Customer account reference id",
            "nullable": true,
            "example": "account12395-32"
          },
          "stats": {
            "description": "Customer stats",
            "nullable": true,
            "example": "Contains customer statistics",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerStatsModel"
              }
            ]
          },
          "disabledDate": {
            "type": "string",
            "description": "Customer disabled date",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "description": "Customer status",
            "nullable": true,
            "example": "active",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerStatus"
              }
            ]
          }
        }
      },
      "CustomerStatsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "entitlementsCount": {
            "type": "integer",
            "description": "Customer entitlements count",
            "format": "int32"
          }
        }
      },
      "CustomerStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "Disabled"
        ],
        "enum": [
          "active",
          "disabled"
        ]
      },
      "CreateCustomerAdminApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Customer admin username",
            "minLength": 1,
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "Customer admin email",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "example": "admin@company.com"
          },
          "password": {
            "type": "string",
            "description": "Customer admin password",
            "minLength": 6,
            "example": "****"
          }
        }
      },
      "UpdateCustomerAdminApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "email"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Customer admin username",
            "maxLength": 50,
            "minLength": 1,
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "Customer admin email",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "example": "admin@company.com"
          },
          "password": {
            "type": "string",
            "description": "Customer admin password",
            "minLength": 6,
            "nullable": true,
            "example": "****"
          }
        }
      },
      "CustomerAdminModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "Customer admin username",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "Customer admin email",
            "example": "admin@company.com"
          }
        }
      },
      "CustomerEupModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "Customer End user portal URL",
            "example": "customer.eup.zentitle.com?customerId=cust_Bx_XkJrFzE2HStEdPdRing"
          }
        }
      },
      "CustomerApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer name",
            "maxLength": 50,
            "minLength": 1,
            "example": "Boeing"
          },
          "accountRefId": {
            "type": "string",
            "description": "Account reference id",
            "maxLength": 50,
            "nullable": true,
            "example": "account12395-32"
          }
        }
      },
      "PaginatedListOfCustomerModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/CustomerModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "UpdateAttributeValueApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string",
            "description": "Attribute value",
            "maxLength": 500,
            "nullable": true,
            "example": "1.0.0"
          }
        }
      },
      "UpdateEditionFeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "description": "Default feature value",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 0,
            "example": 1000
          }
        }
      },
      "FeatureModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Feature identifier",
            "format": "FeatureDefinitionId",
            "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
          },
          "type": {
            "description": "Feature type",
            "example": "elementPool",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeatureType"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "Feature key",
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Feature value",
            "format": "int64",
            "nullable": true,
            "example": 10
          },
          "level": {
            "description": "Level on which feature was defined",
            "example": "global",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeLevel"
              }
            ]
          },
          "valueLevel": {
            "description": "Level on which feature value was defined",
            "example": "global",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeLevel"
              }
            ]
          }
        }
      },
      "FeaturesListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of features",
            "items": {
              "$ref": "#/components/schemas/FeatureModel"
            }
          }
        }
      },
      "EditionModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Edition identifier",
            "format": "EditionId",
            "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
          },
          "productId": {
            "type": "string",
            "description": "Product identifier",
            "format": "ProductId",
            "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
          },
          "name": {
            "type": "string",
            "description": "Edition name",
            "example": "Standard"
          }
        }
      },
      "EditionApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Edition name",
            "maxLength": 50,
            "minLength": 1,
            "example": "Standard"
          }
        }
      },
      "PaginatedListOfEditionModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/EditionModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "PaginatedListOfEntitlementGroupModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/EntitlementGroupModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "EntitlementGroupModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Entitlement group identifier",
            "format": "EntitlementGroupId",
            "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
          },
          "created": {
            "type": "string",
            "description": "Entitlement group creation date",
            "format": "date-time"
          },
          "customerId": {
            "type": "string",
            "description": "Customer identifier",
            "format": "CustomerId",
            "nullable": true,
            "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
          },
          "customer": {
            "description": "Expanded customer object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerModel"
              }
            ]
          },
          "orderRefId": {
            "type": "string",
            "description": "Order reference number",
            "nullable": true
          },
          "entitlements": {
            "type": "array",
            "description": "Array of entitlements",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EntitlementModel"
            }
          },
          "activationCodes": {
            "type": "array",
            "description": "Array of activation codes",
            "example": [
              "Y64E-G6QX-56EW-W1BG1"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EntitlementModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Entitlement identifier",
            "format": "EntitlementId",
            "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
          },
          "sku": {
            "type": "string",
            "description": "Unique offering identifier",
            "example": 1000
          },
          "offeringName": {
            "type": "string",
            "description": "Offering name",
            "example": "Elevate Standard 1year subscription 1seat"
          },
          "licenseType": {
            "description": "License type",
            "example": "subscription",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseType"
              }
            ]
          },
          "licenseStartType": {
            "description": "License start type",
            "example": "activation",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseStartType"
              }
            ]
          },
          "licenseDurationType": {
            "description": "License duration type",
            "example": "year",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntervalType"
              }
            ]
          },
          "licenseDurationCount": {
            "type": "integer",
            "description": "License duration count",
            "nullable": true,
            "example": 1
          },
          "seatCount": {
            "type": "integer",
            "description": "Seat capacity of the entitlement (excluding overdraft)",
            "format": "int32",
            "example": 10
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitModel"
              }
            ]
          },
          "overdraftSeatCount": {
            "type": "integer",
            "description": "Overdraft seats available on entitlement. Null if unlimited.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "seatsUsed": {
            "type": "integer",
            "description": "Number of seats currently in use including overdraft seats",
            "format": "int32",
            "example": 5
          },
          "overdraftSeatsUsed": {
            "type": "integer",
            "description": "Number of overdraft seats currently in use. Null if OverdraftSeatLimit is None.",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "seatUtilizationRate": {
            "type": "integer",
            "description": "Percentage of seats that are currently occupied [(SeatsUsed / SeatCount) x 100%]",
            "format": "int32",
            "example": 50
          },
          "seatsAvailable": {
            "type": "integer",
            "description": "Number of seats available to activate. Null if unlimited.",
            "format": "int32",
            "nullable": true,
            "example": 7
          },
          "provisioningDate": {
            "type": "string",
            "description": "Date when entitlement provisioning was started",
            "format": "date-time",
            "nullable": true
          },
          "activationDate": {
            "type": "string",
            "description": "Date when entitlement was activated",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "Date when entitlement expires",
            "format": "date-time",
            "nullable": true
          },
          "disabledDate": {
            "type": "string",
            "description": "Date when entitlement was disabled",
            "format": "date-time",
            "nullable": true
          },
          "concurrencyMode": {
            "description": "Concurrency mode",
            "example": "concurrent",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConcurrencyMode"
              }
            ]
          },
          "leasePeriod": {
            "description": "Lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "offlineLeasePeriod": {
            "description": "Offline lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "gracePeriod": {
            "description": "Grace period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "lingerPeriod": {
            "description": "Linger period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "gracePeriodExpiry": {
            "type": "string",
            "description": "Date when entitlement grace period expires",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "description": "Status of entitlement",
            "example": "active",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntitlementStatus"
              }
            ]
          },
          "features": {
            "type": "array",
            "description": "Array of entitlement features",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EntitlementFeatureModel"
            }
          },
          "attributes": {
            "type": "array",
            "description": "Array of entitlement attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EntitlementAttributeModel"
            }
          },
          "productId": {
            "type": "string",
            "description": "Id of product licensed by entitlement",
            "format": "ProductId",
            "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
          },
          "product": {
            "description": "Expanded product object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProductModel"
              }
            ]
          },
          "exported": {
            "type": "boolean",
            "description": "Indicates if entitlement has been exported"
          },
          "export": {
            "description": "Expanded export object (if Exported = true)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntitlementExportModel"
              }
            ]
          },
          "entitlementGroupId": {
            "type": "string",
            "description": "Entitlement group identifier",
            "format": "EntitlementGroupId",
            "nullable": true,
            "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "1 month subscription"
          },
          "actions": {
            "type": "object",
            "description": "Actions possible to execute with API urls",
            "nullable": true,
            "example": "{\"Activate\", \"/api/entitlements/ent_oH_hPJ3BgEO172Yd9/activate\"}",
            "additionalProperties": {
              "$ref": "#/components/schemas/ApiActionModel"
            }
          },
          "offeringId": {
            "type": "string",
            "description": "Offering identifier",
            "format": "OfferingId",
            "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
          },
          "offering": {
            "description": "Expanded offering object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntitlementOfferingModel"
              }
            ]
          },
          "editInfo": {
            "description": "Information about edited fields",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntitlementEditInfoModel"
              }
            ]
          }
        }
      },
      "LicenseType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Subscription",
          "Perpetual"
        ],
        "enum": [
          "subscription",
          "perpetual"
        ]
      },
      "LicenseStartType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Activation",
          "EntitlementCreation",
          "Custom",
          "ManualActivation"
        ],
        "enum": [
          "activation",
          "entitlementCreation",
          "custom",
          "manualActivation"
        ]
      },
      "IntervalType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Day",
          "Week",
          "Month",
          "Year",
          "Hour",
          "Minute"
        ],
        "enum": [
          "none",
          "day",
          "week",
          "month",
          "year",
          "hour",
          "minute"
        ]
      },
      "OverdraftSeatLimitModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Overdraft Seat Limit Type",
            "example": "Absolute",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitType"
              }
            ]
          },
          "value": {
            "type": "integer",
            "description": "Overdraft seat limit value",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        }
      },
      "OverdraftSeatLimitType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Absolute",
          "Percentage",
          "Unlimited"
        ],
        "enum": [
          "none",
          "absolute",
          "percentage",
          "unlimited"
        ]
      },
      "ConcurrencyMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Concurrent",
          "NodeLock"
        ],
        "enum": [
          "concurrent",
          "nodeLock"
        ]
      },
      "Interval": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IntervalType"
          },
          "count": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 1,
            "nullable": true
          }
        }
      },
      "EntitlementStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "GracePeriod",
          "Expired",
          "Disabled",
          "Exported",
          "Created",
          "CustomerDisabled"
        ],
        "enum": [
          "active",
          "gracePeriod",
          "expired",
          "disabled",
          "exported",
          "created",
          "customerDisabled"
        ]
      },
      "EntitlementFeatureModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Feature identifier",
            "format": "FeatureDefinitionId",
            "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
          },
          "type": {
            "description": "Feature type",
            "example": "elementPool",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeatureType"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "Feature key",
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Feature value",
            "format": "int64",
            "nullable": true,
            "example": 10
          },
          "used": {
            "type": "integer",
            "description": "Feature current usage",
            "format": "int64",
            "nullable": true,
            "example": 5
          },
          "edited": {
            "type": "boolean",
            "description": "Indicates if feature value was edited",
            "example": true
          }
        }
      },
      "EntitlementAttributeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Attribute identifier",
            "format": "AttributeDefinitionId",
            "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
          },
          "type": {
            "description": "Attribute type",
            "example": "string",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AttributeType"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "Attribute key",
            "example": "Version"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true,
            "example": "1.0.0"
          },
          "edited": {
            "type": "boolean",
            "description": "Indicates if attribute value was edited",
            "example": true
          }
        }
      },
      "ProductModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Product identifier",
            "format": "ProductId",
            "example": "prod_Au_WkJrFzE2HStEdPdRing"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Elevate"
          },
          "leasePeriod": {
            "description": "Lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "offlineLeasePeriod": {
            "description": "Offline lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "gracePeriod": {
            "description": "Grace period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "lingerPeriod": {
            "description": "Linger period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          }
        }
      },
      "EntitlementExportModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "exportDate": {
            "type": "string",
            "description": "Date when entitlement has been exported",
            "format": "date-time"
          },
          "localLicenseServer": {
            "description": "LLS the entitlement has been exported into",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalLicenseServerModel"
              }
            ]
          }
        }
      },
      "LocalLicenseServerModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Local license server identifier",
            "format": "LocalLicenseServerId",
            "example": "lls_oH_hPJ3BgEO172Yd9-KuTg"
          },
          "name": {
            "type": "string",
            "description": "Local license server name",
            "example": "OffsiteNetwork_85083"
          },
          "activationId": {
            "type": "string",
            "description": "Activation identifier linked to the LLS product",
            "format": "ActivationId"
          },
          "activated": {
            "type": "string",
            "description": "Date when Local license server's seat has been activated",
            "format": "date-time"
          },
          "lastLease": {
            "type": "string",
            "description": "Date when activation was created/last extended",
            "format": "date-time"
          },
          "leaseExpiry": {
            "type": "string",
            "description": "Exclusive seat lease expiry date",
            "format": "date-time"
          },
          "deactivated": {
            "type": "string",
            "description": "Date when Local license server's seat has been deactivated, null otherwise",
            "format": "date-time",
            "nullable": true
          },
          "licenseActive": {
            "type": "boolean",
            "description": "True if Local license server's license is active, false otherwise"
          }
        }
      },
      "ApiActionModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "method": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "EntitlementOfferingModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Offering identifier",
            "format": "OfferingId",
            "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
          },
          "seatCount": {
            "type": "integer",
            "description": "Offering seat count",
            "format": "int32",
            "example": 1
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitModel"
              }
            ]
          },
          "attributes": {
            "type": "array",
            "description": "Array of attributes ",
            "items": {
              "$ref": "#/components/schemas/EntitlementOfferingAttributeModel"
            }
          },
          "features": {
            "type": "array",
            "description": "Array of offering features",
            "items": {
              "$ref": "#/components/schemas/EntitlementOfferingFeatureModel"
            }
          }
        }
      },
      "EntitlementOfferingAttributeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Attribute identifier",
            "format": "AttributeDefinitionId",
            "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
          },
          "key": {
            "type": "string",
            "description": "Attribute key",
            "nullable": true,
            "example": "version"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true,
            "example": "1.0.0"
          }
        }
      },
      "EntitlementOfferingFeatureModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Feature identifier",
            "format": "FeatureDefinitionId",
            "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
          },
          "key": {
            "type": "string",
            "description": "Feature key",
            "nullable": true,
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Feature value",
            "format": "int64",
            "nullable": true,
            "example": 10
          }
        }
      },
      "EntitlementEditInfoModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "leasePeriodEdited": {
            "type": "boolean",
            "description": "Indicates if lease period was edited"
          },
          "gracePeriodEdited": {
            "type": "boolean",
            "description": "Indicates if grace period was edited"
          },
          "lingerPeriodEdited": {
            "type": "boolean",
            "description": "Indicates if linger period was edited"
          },
          "offlineLeasePeriodEdited": {
            "type": "boolean",
            "description": "Indicates if offline lease period was edited"
          },
          "seatCountEdited": {
            "type": "boolean",
            "description": "Indicates if seat count was edited"
          },
          "overdraftSeatLimitEdited": {
            "type": "boolean",
            "description": "Indicates if overdraft seat limit was edited"
          }
        }
      },
      "AddActivationCodesApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "activationCodes"
        ],
        "properties": {
          "activationCodes": {
            "type": "array",
            "description": "Activation codes",
            "pattern": "^[A-Z0-9][A-Z0-9-]{0,48}[A-Z0-9]$",
            "minItems": 1,
            "example": [
              "Y64E-G6QX-56EW-W1BH"
            ],
            "items": {
              "type": "string"
            }
          },
          "ignoreDuplicates": {
            "type": "boolean",
            "description": "Duplicates will be ignored, otherwise duplicate code will return error"
          }
        }
      },
      "ActivationCodesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "activationCodes": {
            "type": "array",
            "description": "Array of activation codes",
            "example": [
              "Y64E-G6QX-56EW-W1BG1"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GenerateActivationCodesApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "count"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of activation codes to generate",
            "format": "int32",
            "maximum": 100,
            "minimum": 1,
            "example": 5
          }
        }
      },
      "RemoveActivationCodesApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "activationCodes"
        ],
        "properties": {
          "activationCodes": {
            "type": "array",
            "description": "Activation codes",
            "pattern": "^[A-Z0-9][A-Z0-9-]{0,48}[A-Z0-9]$",
            "minItems": 1,
            "example": [
              "Y64E-G6QX-56EW-W1BH"
            ],
            "items": {
              "type": "string"
            }
          },
          "ignoreMissing": {
            "type": "boolean",
            "description": "Missing codes will be ignored, otherwise not found error will be returned"
          }
        }
      },
      "CreateEntitlementApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sku"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Optional customer id",
            "format": "CustomerId",
            "nullable": true,
            "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
          },
          "sku": {
            "type": "string",
            "description": "Unique offering identifier",
            "maxLength": 20,
            "minLength": 1,
            "example": 1000
          },
          "activationCode": {
            "type": "string",
            "description": "Optional activation code",
            "pattern": "^[A-Z0-9][A-Z0-9-]{0,48}[A-Z0-9]$",
            "nullable": true
          },
          "orderRefId": {
            "type": "string",
            "description": "Optional order reference number",
            "maxLength": 50,
            "nullable": true
          }
        }
      },
      "PaginatedListOfEntitlementListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/EntitlementListModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "EntitlementListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Entitlement identifier",
            "format": "EntitlementId",
            "example": "ent_oH_hPJ3BgEO172Yd9-KuTg"
          },
          "group": {
            "description": "Entitlement group object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntitlementGroupExpandedModel"
              }
            ]
          },
          "sku": {
            "type": "string",
            "description": "Unique offering identifier",
            "example": 1000
          },
          "offeringName": {
            "type": "string",
            "description": "Offering name",
            "example": "Elevate Standard 1year subscription 1seat"
          },
          "licenseType": {
            "description": "License type",
            "example": "subscription",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseType"
              }
            ]
          },
          "licenseStartType": {
            "description": "License start type",
            "example": "activation",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseStartType"
              }
            ]
          },
          "licenseDurationType": {
            "description": "License duration type",
            "example": "year",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntervalType"
              }
            ]
          },
          "licenseDurationCount": {
            "type": "integer",
            "description": "License duration count",
            "nullable": true,
            "example": 1
          },
          "seatCount": {
            "type": "integer",
            "description": "Total seats available on entitlement",
            "format": "int32",
            "example": 1
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitModel"
              }
            ]
          },
          "seatsUsed": {
            "type": "integer",
            "description": "Number of seats currently in use",
            "format": "int32",
            "example": 1
          },
          "seatsAvailable": {
            "type": "integer",
            "description": "Number of seats available to activate",
            "example": 0
          },
          "overdraftSeatsUsed": {
            "type": "integer",
            "description": "Number of overdraft seats currently in use. Null if OverdraftSeatLimit is None.",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "seatUtilizationRate": {
            "type": "integer",
            "description": "Percentage of seats that are currently occupied [(SeatsUsed / SeatCount) x 100%]",
            "format": "int32",
            "example": 100
          },
          "activationDate": {
            "type": "string",
            "description": "Date when entitlement was activated",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "Date when entitlement expires",
            "format": "date-time",
            "nullable": true
          },
          "exported": {
            "type": "boolean",
            "description": "Indicates if entitlement has been exported to a local license server"
          }
        }
      },
      "EntitlementGroupExpandedModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Entitlement group identifier",
            "format": "EntitlementGroupId",
            "example": "egr_gH1hGJ3BgE1LTRYd9-k1tg"
          },
          "created": {
            "type": "string",
            "description": "Entitlement group creation date",
            "format": "date-time"
          },
          "customerId": {
            "type": "string",
            "description": "Customer identifier",
            "format": "CustomerId",
            "nullable": true,
            "example": "cust_n1bmaIvXnEW7DOl0w5EiHQ"
          },
          "customer": {
            "description": "Expanded customer object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerModel"
              }
            ]
          },
          "orderRefId": {
            "type": "string",
            "description": "Order reference number",
            "nullable": true
          }
        }
      },
      "UpdateEntitlementApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seatCount": {
            "type": "integer",
            "description": "Number of seats",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "example": 10
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitApiRequest"
              }
            ]
          },
          "expiryDate": {
            "type": "string",
            "description": "Entitlement expiration date",
            "format": "date-time",
            "nullable": true
          },
          "leasePeriod": {
            "description": "Lease period",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "offlineLeasePeriod": {
            "description": "Offline lease period",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "gracePeriod": {
            "description": "Grace period",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "lingerPeriod": {
            "description": "Linger period",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "attributes": {
            "type": "array",
            "description": "Array of attributes to update",
            "items": {
              "$ref": "#/components/schemas/UpdateAttribute"
            }
          },
          "features": {
            "type": "array",
            "description": "Array of features to update",
            "items": {
              "$ref": "#/components/schemas/UpdateFeature"
            }
          }
        }
      },
      "OverdraftSeatLimitApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Overdraft Seat Limit Type",
            "example": "Absolute",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitType"
              }
            ]
          },
          "value": {
            "type": "integer",
            "description": "Overdraft seat limit value",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        }
      },
      "UpdateAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Attribute identifier",
            "format": "AttributeDefinitionId",
            "minLength": 1,
            "example": "atr_A1dhPJ3BgE1LTRYd9-kAtg"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "maxLength": 500,
            "nullable": true,
            "example": "1.0.0"
          }
        }
      },
      "UpdateFeature": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Feature identifier",
            "format": "FeatureDefinitionId",
            "minLength": 1,
            "example": "feat_B2ghPJ3BgE1LTRYd9-kAtg"
          },
          "value": {
            "type": "integer",
            "description": "New value for feature",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 0,
            "example": 10
          }
        }
      },
      "ChangeEntitlementOfferingApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "offeringId"
        ],
        "properties": {
          "offeringId": {
            "type": "string",
            "description": "Offering identifier",
            "format": "OfferingId",
            "minLength": 1,
            "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
          }
        }
      },
      "ResetEntitlementOverridesApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resetLeasePeriod": {
            "type": "boolean",
            "description": "Reset lease period",
            "nullable": true
          },
          "resetOfflineLeasePeriod": {
            "type": "boolean",
            "description": "Reset offline lease period",
            "nullable": true
          },
          "resetGracePeriod": {
            "type": "boolean",
            "description": "Reset grace period",
            "nullable": true
          },
          "resetLingerPeriod": {
            "type": "boolean",
            "description": "Reset linger period",
            "nullable": true
          },
          "resetSeatCount": {
            "type": "boolean",
            "description": "Reset seat count",
            "nullable": true
          },
          "resetOverdraftSeatLimit": {
            "type": "boolean",
            "description": "Reset overdraft seat limit",
            "nullable": true
          },
          "resetFeatures": {
            "type": "array",
            "description": "Reset features from array",
            "nullable": true,
            "example": [
              "workers"
            ],
            "items": {
              "type": "string"
            }
          },
          "resetAttributes": {
            "type": "array",
            "description": "Reset attributes from array",
            "nullable": true,
            "example": [
              "version"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaginatedListOfActivationModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/ActivationModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "PaginatedListOfActivationLogModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/ActivationLogModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ActivationLogModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "activationId": {
            "type": "string",
            "description": "Activation identifier",
            "format": "ActivationId",
            "nullable": true,
            "example": "act_oH_hPJ3BgE0LTRYd9-k1tg"
          },
          "seatId": {
            "type": "string",
            "description": "Unique id of seat provided by external system",
            "example": "user@boeing.com"
          },
          "timestamp": {
            "type": "string",
            "description": "Operation timestamp",
            "format": "date-time"
          },
          "operation": {
            "description": "Activation operation kind",
            "example": 1,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivationOperation"
              }
            ]
          },
          "leaseExpiry": {
            "type": "string",
            "description": "Activation lease expiry time",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ActivationOperation": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Activate",
          "Refresh",
          "Deactivate",
          "ActivationDenied"
        ],
        "enum": [
          "activate",
          "refresh",
          "deactivate",
          "activationDenied"
        ]
      },
      "ExportEntitlementApiResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "Token for importing the entitlement into the local license server"
          }
        }
      },
      "ExportEntitlementApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "localLicenseServerId"
        ],
        "properties": {
          "localLicenseServerId": {
            "type": "string",
            "description": "Local license server that the entitlement should be imported to",
            "format": "LocalLicenseServerId",
            "minLength": 1
          }
        }
      },
      "ImportEntitlementApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "Token received when deleting the entitlement from the Local License Server",
            "nullable": true
          },
          "importWithoutToken": {
            "type": "boolean",
            "description": "True if the entitlement should be imported without the token, false otherwise"
          }
        }
      },
      "EupSettingsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "End User Portal public address",
            "example": "https://my-elevate.com"
          },
          "logoId": {
            "type": "string",
            "description": "Optional logo file identifier",
            "format": "FileId",
            "nullable": true,
            "example": "file_LL1KqdXz6kKkfU1HcWR9OA"
          },
          "cssId": {
            "type": "string",
            "description": "Optional css file identifier",
            "format": "FileId",
            "nullable": true,
            "example": "file_Kx1KqdXz6kKkfU1HcWR9OA"
          },
          "showActivationsGraph": {
            "type": "boolean",
            "description": "Show activations graph in EUP user interface"
          },
          "logoSizeLimit": {
            "type": "integer",
            "description": "Logo size limit in kilobytes",
            "format": "int32",
            "example": 1024
          }
        }
      },
      "UpdateEupSettingsApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "End User Portal public address",
            "maxLength": 260,
            "minLength": 1,
            "example": "https://my-elevate.com"
          },
          "showActivationsGraph": {
            "type": "boolean",
            "description": "Show activations graph in EUP user interface"
          }
        }
      },
      "FeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "key",
          "value"
        ],
        "properties": {
          "type": {
            "description": "Type of attribute",
            "example": 4,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeatureType"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "Feature unique key",
            "maxLength": 50,
            "minLength": 1,
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Default feature value",
            "format": "int64",
            "example": 10
          }
        }
      },
      "UpdateFeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Feature unique key",
            "maxLength": 50,
            "minLength": 1,
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Default feature value",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 0,
            "example": 10
          }
        }
      },
      "JWK": {
        "type": "object",
        "description": "JSON Web Key\nRFC 7638",
        "additionalProperties": false,
        "properties": {
          "kty": {
            "type": "string",
            "description": "Key type",
            "example": "RSA"
          },
          "n": {
            "type": "string",
            "description": "Modulus",
            "example": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw"
          },
          "e": {
            "type": "string",
            "description": "Exponent",
            "example": "AQAB"
          }
        }
      },
      "ListOfLocalLicenseServerModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/LocalLicenseServerModel"
            }
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "LocalLicenseServerConfigModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "llsLicenseTenantId": {
            "type": "string",
            "description": "Tenant that holds the LLS entitlement",
            "format": "TenantId"
          },
          "llsLicenseTenantKey": {
            "description": "LLS license's tenant public key",
            "oneOf": [
              {
                "$ref": "#/components/schemas/JWK"
              }
            ]
          },
          "clientTenantId": {
            "type": "string",
            "description": "Tenant that holds the entitlements which should be exported to the LLS",
            "format": "TenantId"
          },
          "clientTenantKey": {
            "description": "Client tenant's public key",
            "oneOf": [
              {
                "$ref": "#/components/schemas/JWK"
              }
            ]
          }
        }
      },
      "OfferingModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Offering identifier",
            "format": "OfferingId",
            "example": "off_bH_hPJ3BgEO187Yd9-kuTg"
          },
          "editionId": {
            "type": "string",
            "description": "Edition identifier",
            "format": "EditionId",
            "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
          },
          "edition": {
            "description": "Optional edition object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EditionExtendedModel"
              }
            ]
          },
          "planId": {
            "type": "string",
            "description": "Plan identifier",
            "format": "PlanId",
            "example": "plan_Cu_WkJrFzE2HStEdPdRing"
          },
          "plan": {
            "description": "Optional plan object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanModel"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Offering name",
            "example": "Elevate Standard 1 year subscription 1 seat"
          },
          "sku": {
            "type": "string",
            "description": "Offering SKU",
            "example": 1000
          },
          "seatCount": {
            "type": "integer",
            "description": "Offering seat count",
            "format": "int32",
            "example": 1
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitModel"
              }
            ]
          },
          "concurrencyMode": {
            "description": "Offering concurrency mode",
            "example": "concurrent",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConcurrencyMode"
              }
            ]
          },
          "entitlementsCount": {
            "type": "integer",
            "description": "Optional entitlements count created from this offering",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "EditionExtendedModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Edition identifier",
            "format": "EditionId",
            "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
          },
          "productId": {
            "type": "string",
            "description": "Product identifier",
            "format": "ProductId",
            "example": "prod_oH_hPJ3BgEO187Yd9-kuTg"
          },
          "name": {
            "type": "string",
            "description": "Edition name",
            "example": "Standard"
          },
          "product": {
            "description": "Optional product object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProductModel"
              }
            ]
          }
        }
      },
      "PlanModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan identifier",
            "format": "PlanId",
            "example": "plan_Cu_WkJrFzE2HStEdPdRing"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "1 year subscription"
          },
          "licenseType": {
            "description": "License type",
            "example": "subscription",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseType"
              }
            ]
          },
          "licenseStartType": {
            "description": "License start",
            "example": "activation",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseStartType"
              }
            ]
          },
          "licenseDuration": {
            "description": "License duration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          }
        }
      },
      "OfferingApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "sku",
          "editionId",
          "planId",
          "seatCount",
          "concurrencyMode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Offering name",
            "maxLength": 50,
            "minLength": 1,
            "example": "Elevate Standard 1Y subscription 10 seats"
          },
          "sku": {
            "type": "string",
            "description": "Offering SKU",
            "maxLength": 20,
            "minLength": 1,
            "example": 1000
          },
          "editionId": {
            "type": "string",
            "description": "Edition identifier",
            "format": "EditionId",
            "minLength": 1,
            "example": "ed_yH_hPJ3BgEO187Yd9-kuTg"
          },
          "planId": {
            "type": "string",
            "description": "Plan identifier",
            "format": "PlanId",
            "minLength": 1,
            "example": "plan_Cu_WkJrFzE2HStEdPdRing"
          },
          "seatCount": {
            "type": "integer",
            "description": "Number of license seats",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "example": 10
          },
          "overdraftSeatLimit": {
            "description": "Overdraft seat limit",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OverdraftSeatLimitApiRequest"
              }
            ]
          },
          "concurrencyMode": {
            "description": "Concurrency mode",
            "example": "concurrent",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConcurrencyMode"
              }
            ]
          }
        }
      },
      "PaginatedListOfOfferingModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/OfferingModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "OfflineActivationApiResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "Signed and encrypted offline activation token, holding the activation's state"
          }
        }
      },
      "OfflineActivationApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Encrypted offline activation token, containing all the info required for the seat activation",
            "minLength": 1
          }
        }
      },
      "OfflineDeactivationApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Encrypted offline deactivation token",
            "minLength": 1
          }
        }
      },
      "OfflineRefreshApiResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "Signed and encrypted offline refresh token, holding the refreshed activation's state"
          }
        }
      },
      "PlanApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "licenseType",
          "licenseStartType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of plan",
            "maxLength": 50,
            "minLength": 1,
            "example": "1 year subscription"
          },
          "licenseType": {
            "description": "License type",
            "example": "subscription",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseType"
              }
            ]
          },
          "licenseStartType": {
            "description": "License start",
            "example": "activation",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LicenseStartType"
              }
            ]
          },
          "licenseDuration": {
            "description": "License duration interval",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          }
        }
      },
      "PaginatedListOfPlanModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/PlanModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "UpdateProductFeatureApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Feature unique key",
            "maxLength": 50,
            "nullable": true,
            "example": "Workers"
          },
          "value": {
            "type": "integer",
            "description": "Default feature value",
            "format": "int64",
            "maximum": 9223372036854780000,
            "minimum": 0,
            "example": 10
          }
        }
      },
      "CreateProductApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of product",
            "maxLength": 50,
            "minLength": 1,
            "example": "Elevate"
          }
        }
      },
      "UpdateProductApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "leasePeriod",
          "offlineLeasePeriod",
          "gracePeriod",
          "lingerPeriod"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of product",
            "maxLength": 50,
            "minLength": 1,
            "example": "Elevate"
          },
          "leasePeriod": {
            "description": "Lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "offlineLeasePeriod": {
            "description": "Offline lease period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "gracePeriod": {
            "description": "Grace period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          },
          "lingerPeriod": {
            "description": "Linger period",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Interval"
              }
            ]
          }
        }
      },
      "PaginatedListOfProductModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/ProductModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ListOfRoleListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/RoleListModel"
            }
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "RoleListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Role identifier",
            "format": "RoleId",
            "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
          },
          "name": {
            "type": "string",
            "description": "Role name",
            "maxLength": 50,
            "example": "zentitle-admin"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of a role",
            "maxLength": 255,
            "example": "System administrator with all possible permissions"
          }
        }
      },
      "RoleModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Role identifier",
            "format": "RoleId",
            "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
          },
          "name": {
            "type": "string",
            "description": "Role name",
            "maxLength": 50,
            "example": "zentitle-admin"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of a role",
            "maxLength": 255,
            "nullable": true,
            "example": "System administrator with all possible permissions"
          },
          "permissions": {
            "type": "array",
            "description": "Array of permissions assigned to a role",
            "items": {
              "$ref": "#/components/schemas/PermissionModel"
            }
          }
        }
      },
      "PermissionModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Permission identifier",
            "format": "PermissionId",
            "example": "perm_Cd_iPJ3BgX9LTRYd9-a1tg"
          },
          "name": {
            "type": "string",
            "description": "Permission name",
            "maxLength": 50,
            "example": "products:read"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of a permission",
            "maxLength": 255,
            "nullable": true,
            "example": "Allows reading of product catalog"
          }
        }
      },
      "TenantClientModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Name of client",
            "example": "elevate-api-client"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret",
            "example": "xMHmhxf6wdt7RtPHAde8AC101loUQfFr"
          }
        }
      },
      "CreateClientApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tenantId",
          "clientId"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant id",
            "format": "TenantId",
            "minLength": 1,
            "example": "t_KhOs_W-MTkO1DEKFne5Znw"
          },
          "clientId": {
            "type": "string",
            "description": "Name of client",
            "maxLength": 50,
            "minLength": 1,
            "example": "elevate-api-client"
          },
          "clientSecret": {
            "type": "string",
            "description": "Optional client secret",
            "maxLength": 64,
            "minLength": 32,
            "nullable": true
          }
        }
      },
      "UserModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of an user in the system",
            "format": "UserId",
            "example": "user_oH_hPJ3BgEOLTRYd9-kutg"
          },
          "username": {
            "type": "string",
            "description": "Username used to login into system",
            "maxLength": 50,
            "example": "john.doe"
          },
          "firstName": {
            "type": "string",
            "description": "First name of an user",
            "maxLength": 50,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of an user",
            "maxLength": 50,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email connected with user account",
            "maxLength": 50,
            "nullable": true,
            "example": "john.doe@elevate.com"
          },
          "enabled": {
            "type": "boolean",
            "description": "If user account is currently enabled"
          },
          "roleId": {
            "type": "string",
            "description": "Id of a role that will be assigned to user",
            "format": "RoleId",
            "nullable": true,
            "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "If user email is verified",
            "nullable": true
          }
        }
      },
      "CreateUserApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "firstName",
          "lastName",
          "email",
          "roleId"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Name of an user that will be used to login into system",
            "maxLength": 50,
            "minLength": 1,
            "example": "john.doe"
          },
          "firstName": {
            "type": "string",
            "description": "First name of an user",
            "maxLength": 50,
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of an user",
            "maxLength": 50,
            "minLength": 1,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email that will be used for registration process and for password recovery",
            "format": "email",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9-!#$%&'*+=?.]{1,50}@[a-zA-Z0-9-.]{1,50}$",
            "example": "john.doe@elevate.com"
          },
          "roleId": {
            "type": "string",
            "description": "Id of a role that will be assigned to user",
            "format": "RoleId",
            "minLength": 1,
            "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
          }
        }
      },
      "PaginatedListOfUserModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/UserModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "UpdateUserApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "firstName",
          "lastName",
          "email",
          "roleId"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of an user",
            "maxLength": 50,
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of an user",
            "maxLength": 50,
            "minLength": 1,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email that will be used for registration process and for password recovery",
            "format": "email",
            "maxLength": 100,
            "minLength": 1,
            "example": "john.doe@elevate.com"
          },
          "roleId": {
            "type": "string",
            "description": "Id of a role that will be assigned to user",
            "format": "RoleId",
            "minLength": 1,
            "example": "role_Qw_iPJ3BgEaLTRYd9-kut1"
          }
        }
      },
      "WebhookModel": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "subscriptions"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of an webhook in the system",
            "format": "WebhookListenerId",
            "example": "wh_oH_hPJ3BgEO8T9Yd9-k9tg"
          },
          "uri": {
            "type": "string",
            "description": "Webhook uri",
            "format": "uri",
            "maxLength": 2048,
            "example": "https://example.com/webhook"
          },
          "subscriptions": {
            "type": "array",
            "description": "Array of webhook events",
            "example": [
              "entitlement.group.created",
              "entitlement.created"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateWebhookApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "uri",
          "subscriptions"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "description": "Webhook uri",
            "maxLength": 2048,
            "minLength": 1,
            "example": "https://example.com/webhook"
          },
          "subscriptions": {
            "type": "array",
            "description": "Array of webhook event subscription codes",
            "minItems": 1,
            "example": [
              "entitlement.group.created",
              "entitlement.created"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateWebhookApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "uri",
          "subscriptions"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "description": "Webhook uri",
            "maxLength": 2048,
            "minLength": 1,
            "example": "https://example.com/webhook"
          },
          "subscriptions": {
            "type": "array",
            "description": "Array of webhook events subscription codes",
            "minItems": 1,
            "example": [
              "entitlement.group.created",
              "entitlement.created"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaginatedListOfWebhookModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/WebhookModel"
            }
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size or default page size if not specified",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Requested page number of first page otherwise",
            "format": "int32",
            "example": 1
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ListOfWebhookEventTypeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of items matching specified query filters",
            "items": {
              "$ref": "#/components/schemas/WebhookEventTypeModel"
            }
          },
          "elementsTotal": {
            "type": "integer",
            "description": "Total number of elements matching filter criteria",
            "format": "int32",
            "example": 1
          }
        }
      },
      "WebhookEventTypeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Webhook event type",
            "example": "entitlement",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ]
          },
          "code": {
            "type": "string",
            "description": "Webhook event code",
            "example": "entitlement.created"
          },
          "description": {
            "type": "string",
            "description": "Webhook event description",
            "example": "Event generated when entitlement was successfully created"
          }
        }
      },
      "EventType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "EntitlementGroup",
          "Entitlement",
          "Customer"
        ],
        "enum": [
          "entitlementGroup",
          "entitlement",
          "customer"
        ]
      },
      "ApiError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "details": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "description": "Please obtain access_token from your Zentitle Identity Provider",
        "name": "Zentitle Gen2 API Authentication",
        "in": "header",
        "flows": {
          "implicit": {}
        }
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Activations"
    },
    {
      "name": "ApiClients"
    },
    {
      "name": "Global attributes"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Edition attributes"
    },
    {
      "name": "Edition features"
    },
    {
      "name": "Editions"
    },
    {
      "name": "Groups"
    },
    {
      "name": "General entitlement operations"
    },
    {
      "name": "End User Portal"
    },
    {
      "name": "Global features"
    },
    {
      "name": "Keys"
    },
    {
      "name": "Local license servers"
    },
    {
      "name": "Offerings"
    },
    {
      "name": "Plans"
    },
    {
      "name": "Product attributes"
    },
    {
      "name": "Product features"
    },
    {
      "name": "General product operations"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Tenants"
    },
    {
      "name": "Users"
    },
    {
      "name": "Webhooks"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Entitlements",
      "tags": [
        "General entitlement operations",
        "Activations",
        "Groups",
        "Local license servers"
      ]
    },
    {
      "name": "Products",
      "tags": [
        "General product operations",
        "Product attributes",
        "Product features",
        "Editions",
        "Edition attributes",
        "Edition features",
        "Offerings"
      ]
    },
    {
      "name": "General",
      "tags": [
        "Customers"
      ]
    },
    {
      "name": "General configuration",
      "tags": [
        "Global attributes",
        "Global features",
        "Plans"
      ]
    },
    {
      "name": "Account configuration",
      "tags": [
        "Users",
        "Roles",
        "Keys",
        "Webhooks",
        "ApiClients",
        "End User Portal"
      ]
    }
  ]
}